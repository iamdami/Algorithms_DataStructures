# 개미 전사 문제
# 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량 창고를 몰래 공격하려 함
# 메뚜기 마을에는 여러 개의 식량 창고가 있는데, 식량 창고는 일직선으로 이어져 있음
# 각 식량 창고에는 정해진 수의 식량을 저장하고 있으며, 개미 전사는 식량 창고를 선택적으로 약탈해 식량을 빼잇을 예정
# 이때 메뚜기 정찰병들은 일직선상에 존재하는 식량 창고 중에서 서로 인접한 식량 창고가 공격받으면 바로 알아챌 수 있음
# 따라서 개미 전사가 정찰병에게 들키지 않고 식량 창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량 창고 약탈해야 함

# 예) 식량 창고 4개가 다음과 같이 존재
# {1, 3, 1, 5}

# 이때 개미 전사는 두 번째 식량 창고와 네 번째 식량 창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있음
# 개미 전사는 식량 창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원함
# 식량 창고 N개에 대한 정보 주어졌을 때 얻을 수 있는 식량의 최댓값 구하는 프로그램 작성

# 입력 조건
# 첫째 줄에 식량 창고의 개수 N이 주어짐(3 <= N <= 100)
# 둘째 줄에 공백을 기준으로 각 식량 창고에 저장된 식량의 개수 K가 주어짐(0 <= K <= 1,000)

# 출력 조건
# 첫째 줄에 개미 전사가 얻을 수 있는 식량의 최댓값 출력

n = int(input())  # 정수 n 입력 받기

allFood = list(map(int, input().split()))

dp = [0] * 100  # 앞서 계산된 결과 저장받기 위한 DP 테이블 초기화

# 다이나믹 프로그래밍(btm up)
dp[0] = allFood[0]
dp[1] = max(allFood[0], allFood[1])
for i in range(2, n):
    dp[i] = max(dp[i - 1], dp[i - 2] + allFood[i])

print(dp[n - 1])
