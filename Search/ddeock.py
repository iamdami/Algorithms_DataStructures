# 입력 조건
# 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M 주어짐(1 <= N <= 1,000,000, 1 <= M <= 2,000,000,000)
# 둘째 줄에는 떡의 개별 높이 주어짐
# 떡 높이의 총합은 항상 M 이상 -> 손님은 필요한 양만큼 떡 사갈 수 있음
# 높이는 10억보다 작거나 같은 양의 정수 또는 0

# 출력 조건
# 적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최대값 출력

# 입력 예시
# 4 6
# 19 15 10 17

# 출력 예시
# 15

# 해결 아이디어
# 적절한 높이 찾을 때까지 이진 탐색 수행해 높이를 반복해 조정
# 현재 이 높이로 자르면 조건 만족할 수 있는지 확인 후 조건의 만족 여부에 따라 탐색 범위 좁혀 해결
# 절단기 높이는 0부터 10억까지 정수 중 하나(이렇게 큰 탐색 범위 보면 이진 탐색 먼저 떠올리기!)

# 이진 탐색 과정 반복
# 중간점 값은 시간이 지날수록 최적화된 값
# 과정 반복하며 얻을 수 있는 떡의 길이 합이 필요한 떡의 길이보다 크거나 같을 때마다 중간점 값(그때의 높이 값) 기록

n, m = list(map(int, input().split(' ')))
arr = list(map(int, input().split()))

# 이진 탐색 시작점, 끝점
start = 0
end = max(arr)

# 이진 탐색
res = 0
while(start <= end):
    total = 0
    mid = (start + end) // 2
    for x in arr:
        # 잘랐을 때 양 계산
        if x > mid:
            total += x - mid
        # 양 부족하면 더 자름
        if total < m:
            end = mid - 1
        # 양 충분하면 덜 자름
        else:
            res = mid  # 최대한 덜 잘랐을 때가 정답 -> res에 기록
            start = mid + 1
# 정답
print(res)

