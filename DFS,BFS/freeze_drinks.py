'''
n*m 크기의 얼음 틀

0: 구멍 뚫려있는 부분
1: 칸막이 존재하는 부분
구멍 뚫려있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주

Q. 얼음 틀 모양 주어졌을 때 생성되는 총 아이스크림 개수?
'''

# 연결 요소 찾는 문제 
# DFS 혹은 BFS로 해결 가능
# 얼음 얼릴 수 있는 공간이 연결되어 있음 -> 그래프 형태로 표현

'''
DFS 활용하는 알고리즘
1. 특정 지점의 주변 상, 하, 좌, 우 살펴본 후 주변 지점 중 값이 0이면서 아직 방문하지 않은 지점이 있다면 해당 지점 방문
2. 방문한 지점에서 다시 상, 하, 좌, 우 살펴보며 방문 진행하는 과정 반복
  -> 연결된 모든 지점 방문 가능  
3. 모든 노드에 대해 1 ~ 2 과정 반복하며 방문하지 않은 지점 수 cnt
'''

# N, M을 공백을 기준으로 구분하여 입력 받기
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력 받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))  # 입력이 공백 없이 0과 1 문자열 형태로 주어지기 때문

# DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문
def dfs(x, y):
    # 주어진 범위를 벗어나는 경우에는 즉시 종료
    if x <= -1 or x >= n or y <= -1 or y >= m:
        return False
    # 현재 노드를 아직 방문하지 않았다면
    if graph[x][y] == 0:
        # 해당 노드 방문 처리
        graph[x][y] = 1
        # 상, 하, 좌, 우의 위치들도 모두 재귀적으로 호출
        # 각각은 리턴값 반환하지 않음
        # 단순히 방문처리 하기 위함
        dfs(x - 1, y)
        dfs(x, y - 1)
        dfs(x + 1, y)
        dfs(x, y + 1)
        return True
    return False

# 모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
    for j in range(m):
        # 현재 위치에서 DFS 수행
        if dfs(i, j) == True:  # 처음 방문할 때만 결과값 1 증가시킴
            result += 1

print(result) # 정답 출력
